-- MySQL dump 10.13  Distrib 5.5.35, for Linux (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	5.5.35-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `admin`
--

DROP TABLE IF EXISTS `admin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `admin` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `auth_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `password_hash` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password_reset_token` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '10',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `password_reset_token` (`password_reset_token`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin`
--

LOCK TABLES `admin` WRITE;
/*!40000 ALTER TABLE `admin` DISABLE KEYS */;
INSERT INTO `admin` VALUES (1,'admin','PrjLkBD0XaUZYRw3zmEXb-O3NhV2Dn_Y','$2y$13$uSOeGGih.oj/R.YeIIGXxuzAMsPlD/WY/MHny646osrxAoCX7QVcq',NULL,'273890638@qq.com',10,1513906430,1513906430);
/*!40000 ALTER TABLE `admin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cats`
--

DROP TABLE IF EXISTS `cats`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cats` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `cat_name` varchar(255) DEFAULT NULL COMMENT '分类名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='分类表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cats`
--

LOCK TABLES `cats` WRITE;
/*!40000 ALTER TABLE `cats` DISABLE KEYS */;
INSERT INTO `cats` VALUES (1,'php'),(2,'yii');
/*!40000 ALTER TABLE `cats` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feeds`
--

DROP TABLE IF EXISTS `feeds`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `feeds` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `content` varchar(255) DEFAULT NULL,
  `created_at` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `feeds`
--

LOCK TABLES `feeds` WRITE;
/*!40000 ALTER TABLE `feeds` DISABLE KEYS */;
INSERT INTO `feeds` VALUES (1,1,'问问问问无',1514456763),(2,1,'DRGDGD',1514706422);
/*!40000 ALTER TABLE `feeds` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migration`
--

DROP TABLE IF EXISTS `migration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migration` (
  `version` varchar(180) NOT NULL,
  `apply_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migration`
--

LOCK TABLES `migration` WRITE;
/*!40000 ALTER TABLE `migration` DISABLE KEYS */;
INSERT INTO `migration` VALUES ('m000000_000000_base',1513905848),('m130524_201442_init',1513905871);
/*!40000 ALTER TABLE `migration` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post_extends`
--

DROP TABLE IF EXISTS `post_extends`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post_extends` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `browser` int(11) NOT NULL DEFAULT '0',
  `collect` int(11) NOT NULL DEFAULT '0',
  `praise` int(11) NOT NULL DEFAULT '0',
  `comment` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post_extends`
--

LOCK TABLES `post_extends` WRITE;
/*!40000 ALTER TABLE `post_extends` DISABLE KEYS */;
INSERT INTO `post_extends` VALUES (1,1,3,0,0,0),(2,2,12,0,0,0),(3,3,10,0,0,0),(4,4,3,0,0,0),(5,5,17,0,0,0),(6,6,3,0,0,0),(7,7,3,0,0,0),(8,9,3,0,0,0),(9,11,5,0,0,0),(10,12,3,0,0,0),(11,13,7,0,0,0),(12,14,2,0,0,0),(13,15,1,0,0,0),(14,16,2,0,0,0),(15,17,6,0,0,0),(16,18,335,0,0,0),(17,19,26,0,0,0),(18,20,33,0,0,0),(19,21,31,0,0,0),(20,22,31,0,0,0),(21,23,35,0,0,0),(22,24,68,0,0,0),(23,25,169,0,0,0),(24,26,65,0,0,0),(25,27,346,0,0,0),(26,28,185,0,0,0),(27,29,48,0,0,0),(28,30,32,0,0,0),(29,31,54,0,0,0),(30,32,158,0,0,0),(31,33,158,0,0,0),(32,34,36,0,0,0),(33,35,100,0,0,0),(34,36,123,0,0,0),(35,37,56,0,0,0),(36,38,92,0,0,0),(37,39,91,0,0,0),(38,40,21,0,0,0),(39,41,32,0,0,0),(40,42,19,0,0,0),(41,43,28,0,0,0),(42,44,40,0,0,0),(43,45,42,0,0,0),(44,46,17,0,0,0),(45,47,18,0,0,0),(46,48,18,0,0,0);
/*!40000 ALTER TABLE `post_extends` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `summary` varchar(255) DEFAULT NULL COMMENT '摘要',
  `content` text COMMENT '内容',
  `label_img` varchar(255) DEFAULT NULL COMMENT '标签图',
  `cat_id` int(11) DEFAULT NULL COMMENT '分类id',
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名',
  `is_valid` tinyint(1) DEFAULT '0' COMMENT '是否有效 0-未发布 1-已发布',
  `created_at` int(11) DEFAULT NULL COMMENT '创建时间',
  `updated_at` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (18,'git用法','* windows安装\r\n    \r\n    https://git-for-windows.github.io/\r\n\r\n* 创建SSH Key：\r\n    \r\n    `$ ss','* windows安装\r\n    \r\n    https://git-for-windows.github.io/\r\n\r\n* 创建SSH Key：\r\n    \r\n    `$ ssh-keygen -t rsa -C \"youremail@example.com\"`\r\n\r\n* git version `git`安装版本查看\r\n* git init    初始化一个GIT仓库，创建唯一一个master分支\r\n* git add readme.txt        把文件修改添加到暂存区\r\n* git commit -m \"what\"      把暂存区的所有内容提交到当前分支\r\n* git status      查看仓库当前的状态\r\n* cat readme.txt  // 查看内容\r\n* git diff         查看做个哪些修改\r\n* git log         显示从最近到最远的提交日志\r\n* git log --pretty=oneline  显示较少日志\r\n* HEAD表示当前版本  HEAD^ 上一个版本   HEAD^^上上一个版本    \r\n* HEAD~100往上100个版本\r\n* git reset --hard HEAD^ 从当前版本回退到上一个版本\r\n* git reset --hard 51c102  到commit id为51c102的版本\r\n* git reflog       记录每一次命令，可以查到commit id\r\n* git checkout -b temp HEAD@{3} 从`HEAD@{3}`切换到新建分支`temp`\r\n* `git checkout -b 本地分支名x origin/远程分支名x` 拉取远程分支，在本地新建分支x,并自动切换到该本地分支x\r\n* git branch temp 新建分支temp\r\n* git checkout temp 切换到分支temp\r\n* git merge temp 将temp合并回当前分支\r\n* git branch -d temp 删除分支temp\r\n* git branch -r 查看所有远程分支\r\n* git diff HEAD -- readme.txt   查看工作区和版本库里面最新版本的区别\r\n* git checkout -- readme.txt    未到暂存区回撤   rm删除后恢复\r\n* git reset HEAD readme.txt     回退暂存区修改到工作区\r\n* rm test.txt   删除\r\n* git rm test.txt   git commit -m \"\" 从版本库中删除\r\n* $ ssh-keygen -t rsa -C \"youremail@example.com\"  创建SSH Key\r\n* 添加远程仓库git remote add origin git@github.com:michaelliao/learngit.git\r\n* $ git push -u origin master \r\n* git remote -v 显示远程库详细信息\r\n* Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念\r\n* `git fetch origin 远程分支名:本地分支名` 拉取远程分支，在本地新建分支，但不自动切换到该本地分支\r\n* 在任何时候，你可以用--abort参数来终止rebase的行动，并且\"mywork\" 分支会回到rebase开始前的状态。`git rebase --abort`\r\n* 添加当前目录的所有文件到暂存区` git add .`\r\n* 查看远程分支，远程分支会用红色表示出来`git branch -a`\r\n* 删除远程仓库 `git remote rm 库`\r\n*****\r\n\r\n## 问题：fatal: refusing to merge unrelated histories\r\n\r\n解决：添加`--allow-unrelated-histories`，这个问题在2.9.0之后的版本才出现的，以前的版本可以正常工作。例：`$git pull origin master--allow-unrelated-histories`\r\n\r\n## 问题：error: failed to push some refs to \'git@github.com:zrong/quick-cocos2d-x.git\'\r\n解决：删除远程分支命令`$ git push 【你的远程仓库在本地的别名】【空格】【冒号】【你的分支名字】`,如果删除分支是默认分支便会出现此问题\r\n\r\n## 问题：git从远程的分支获取最新的版本到本地命令：   \r\n`git fetch`：相当于是从远程获取最新版本到本地，不会自动merge\r\n\r\n    git fetch origin master   \r\n    git log -p master..origin/master   \r\n    git merge origin/master   \r\n        \r\n以上命令的含义：\r\n首先从远程的origin的master主分支下载最新的版本到origin/master分支上    \r\n然后比较本地的master分支和origin/master分支的差别   \r\n最后进行合并\r\n    \r\n上述过程其实可以用以下更清晰的方式来进行：\r\n\r\n    git fetch origin master:tmp   \r\n    git diff tmp   \r\n    git merge tmp\r\n    \r\n从远程获取最新的版本到本地的tmp分支上之后再进行比较合并\r\n    \r\n`git pull`：相当于是从远程获取最新版本并merge到本地\r\n    \r\n    git pull origin master\r\n        \r\n上述命令其实相当于git fetch 和 git merge   \r\n在实际使用中，git fetch更安全一些   \r\n因为在merge前，我们可以查看更新情况，然后再决定是否合并\r\n\r\n## Git冲突：commit your changes or stash them before you can merge. 解决办法\r\n\r\n1. 保留本地的修改的改法\r\n    * 直接commit本地的修改\r\n    * 通过git stash\r\n    \r\n    ```\r\n    git stash\r\n    git pull\r\n    git stash pop\r\n    ```\r\n    \r\n    通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。\r\n\r\n    `git stash`: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\r\n\r\n    `git stash pop`: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。\r\n\r\n    git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\r\n\r\n    `git stash clear`: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。\r\n    \r\n 2. 放弃本地修改的改法\r\n   \r\n    ```\r\n    git reset --hard\r\n    git pull\r\n    ```\r\n\r\n##  `.gitignore`只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：\r\n    \r\n    git rm -r --cached .\r\n    git add .\r\n    git commit -m \'update .gitignore\'\r\n   \r\n## windows使用git时出现：warning: LF will be replaced by CRLF\r\n    \r\n    rm -rf .git  // 删除.git  \r\n    git config --global core.autocrlf false  //禁用自动转换然后重新执行\r\n    git init    \r\n    git add .  \r\n    ','',0,4,'arangda',1,1517645037,1517645037),(19,'NumPy库','# NumPy库\r\n* 下载NumPy https://pypi.python.org/pypi/numpy\r\n* `import numpy as np`\r\n* 整个NumPy库','# NumPy库\r\n* 下载NumPy https://pypi.python.org/pypi/numpy\r\n* `import numpy as np`\r\n* 整个NumPy库的基础是ndarray(N-dimensional array,N维数组)对象，数据类型由另外一个叫做dtype(data-type,数据类型)的NumPy对象来指定，数组的维数和元素数量由数组的型(shape)来确定，数组的维统称为轴(axes),轴的数量被称作秩(rank)。\r\n* a.dtype 获取ndarray数据类型\r\n* a.ndim  轴数量\r\n* a.size  数组长度\r\n* a.shape 型\r\n* a.itemsize 数组中每个元素的长度为几个字节\r\n* 自带的数组创建方法   \r\n    np.zeros((3,3)),np.ones(3.3)这两个函数默认使用float64数据类型创建数组   \r\n    np.arange(4,10)   \r\n    np.arange(4,10,5)第三个参数是间隔差距，可以是浮点型   \r\n    np.arange(0,12).reshape(3,4)   \r\n    np.linspace(0,10,5) 第三个参数是把前两个数字指定范围分成几个部分   \r\n    np.random.random(3)\r\n* 矩阵积\r\n* 自增和自减运算符 结果赋给参与运算的数组自身\r\n* 通用函数\r\n* 聚合函数\r\n* 索引机制\r\n* 切片操作\r\n* for item in A.flat\r\n* np.apply_along_axis(np.mean,axis=0,arr=A)\r\n* 条件和布尔数组\r\n* 形状变换   \r\n    a.ravel() 二维数组变为一维数组   \r\n    a.shape = (12)\r\n    a.transpose() 交换行列位置的矩阵转置\r\n* 连接数组   \r\n    vstack    垂直入栈   \r\n    hstack    水平入栈   \r\n    column_stack()   \r\n    row_stack()\r\n* 数组切分   \r\n    水平切分 hsplit()   \r\n    垂直切分 vsplit()   \r\n    split()\r\n* 常用概念    \r\n    数组切片操作返回的对象只是原数组的视图   \r\n    如果想为原数组生成一份完整的副本，从而得到一个不同的数组，使用copy()函数即可\r\n    ##### 向量化\r\n    ##### 广播机制\r\n    \r\n* 结构化数组\r\n* 数组数据文件的读写\r\n','',0,4,'arangda',1,1520677060,1520677060),(20,'nginx + Gunicorn部署django','### nginx安装\r\n    \r\n    yum install nginx\r\n    \r\n增加此站的nginx配置文件\r\n```\r\nserver {\r\n    charset','### nginx安装\r\n    \r\n    yum install nginx\r\n    \r\n增加此站的nginx配置文件\r\n```\r\nserver {\r\n    charset utf-8;\r\n    listen 80;\r\n    server_name blog.arangda.com; \r\n\r\n    location /static { \r\n        alias /var/www/blogproject/static; \r\n    }\r\n\r\n    location / { \r\n        proxy_set_header Host $host;\r\n        proxy_pass http://unix:/tmp2/blog.arangda.com.socket;\r\n    }\r\n}\r\n```\r\n### 使用 Gunicorn\r\n\r\nGunicorn 一般用来管理多个进程，有进程挂了Gunicorn 可以把它拉起来，防止服务器长时间停止服务，还可以动态调整 worker 的数量，请求多的时候增加 worker 的数量，请求少的时候减少。\r\n\r\n在虚拟环境下，安装 Gunicorn：\r\n    \r\n    (py3_env) pip install gunicorn\r\n    \r\n用 Gunicorn 启动服务器进程：\r\n\r\n    (py3_env)  /var/ENVS/py3_env/bin/gunicorn --bind unix:/tmp2/blog.arangda.com.socket blogproject.wsgi:application\r\n    \r\n浏览器输入域名，可以看到访问成功了！\r\n    \r\n### supervisor管理进程\r\n\r\n安装supervisor\r\n    \r\n    pip install supervisor\r\n    \r\n生成supervisor默认配置文件,如在python2.7虚拟环境中\r\n    \r\n    echo_supervisord_conf > /etc/supervisord.conf\r\n\r\n\r\n打开supervisord.conf在底部添加如下代码\r\n```    \r\n[program:blogproject]\r\ncommand=/var/ENVS/py3_env/bin/gunicorn --bind unix:/tmp2/blog.arangda.com.socket blogproject.wsgi:application\r\ndirectory=/var/www/blogproject\r\nstartsecs=0\r\nstopwaitsecs=0\r\nautostart=true\r\nautorestart=true\r\n```\r\n\r\n启动supervisor\r\n\r\n    supervisord -c /etc/supervisord.conf\r\n\r\n或者启动，停止，重启supervisor管理的某个程序或所有程序\r\n\r\n    supervisorctl -c /etc/supervisord.conf [start|stop|restart] [program-name|all]','',0,4,'arangda',1,1520677245,1520677245),(21,'wamp(win10+apache+mysql+php)','### php安装\r\n\r\nTS：Thread Safe 线程安全， 执行时会进行线程（Thread）安全检查\r\nNTS：Non Thread Safe 非线程安全， 在执行时不进行','### php安装\r\n\r\nTS：Thread Safe 线程安全， 执行时会进行线程（Thread）安全检查\r\nNTS：Non Thread Safe 非线程安全， 在执行时不进行线程（Thread）安全检查\r\n\r\n我使用Apache+PHP的模式下，一般是把PHP作为一个Module load到apache中，那么以apache父进程-多子进程的工作模式，是需要进行线程安全检查的，所以如果是以这种方式执行php，选择ts版本\r\n\r\n那么如果是使用fastcgi，比如说用php-fpm管理php执行，则不需要进行线程安全检查，则选择nts版本的php\r\n\r\n* 复制php.ini-development,改为php.ini\r\n* 修改   \r\n```       \r\n; On windows:\r\nextension_dir = \"D:/webapp/php56/ext\"\r\n```\r\n### apache安装\r\n\r\n* httpd.conf中添加或修改\r\n```\r\nServerRoot E:\\webapp\\apache24\r\nLoadModule php5_module \"D:/webapp/php56/php5apache2_4.dll\"\r\nAddHandler application/x-httpd-php .php\r\nPHPIniDir \"D:/webapp/php56\"\r\nDirectoryIndex index.php index.html\r\nDocumentRoot \"${SRVROOT}/htdocs\"\r\n<Directory \"${SRVROOT}/htdocs\">  都修改为自己项目地址如：F：/www\r\n```\r\n* 安装\r\n        \r\n    安装/卸载命令（以管理员身份运行CMD）\r\n\r\n    安装命令：`\"J:\\apache\\Apache24\\bin\\httpd.exe\" -k install -n apache`\r\n\r\n 启动Apache时提示错误“Cannot load php5apache2_2.dll into server”,\r\n 我的php版本为 VC11 x64 Thread Safe ,下载vc11对应的Visual Studio 2012 x64,安装后OK\r\n### mysql安装\r\n* 在E:\\webapp\\mysql-5.7.19下新建my.ini，配置如下:\r\n```\r\n[mysql]\r\n# 设置mysql客户端默认字符集\r\ndefault-character-set=utf8 \r\n[mysqld]\r\n#设置3306端口\r\nport = 3306 \r\n# 设置mysql的安装目录\r\nbasedir=E:\\webapp\\mysql-5.7.19\r\n# 设置mysql数据库的数据的存放目录\r\ndatadir=E:\\webapp\\mysql-5.7.19\\data\r\n# 允许最大连接数\r\nmax_connections=200\r\n# 服务端使用的字符集默认为8比特编码的latin1字符集\r\ncharacter-set-server=utf8\r\n# 创建新表时将使用的默认存储引擎\r\ndefault-storage-engine=INNODB \r\n#log-error=D:\\mysql\\mysql_log_err.txt\r\n#log=D:\\mysql\\mysql_log.txt\r\n#log-bin=d:/log/mysql/mysql_log_bin\r\n#log-slow-queries= D:\\mysql\\mysql_log_slow.txt\r\n```\r\n* D:\\webapp\\mysql-5.7.19\\bin加入系统变量\r\n* mysqld --initialize-insecure  生成data\r\n* msvcr120.dll   百度搜索并安装\r\n* msvcp120.dll\r\n* mysqld 无法正常启动0xc000007b  安装DirectX 9.0c   安装之后还是出问题，下载一个DirectX Repair V3.5修复工具修复一下就可以\r\n* mysqld.exe -install mysql  \r\n* net start mysql  启动\r\n* 设置密码，新安装的root是没有密码，`mysql -u root` 进入mysql，执行语句：`set password = password(\'123456\');`设置密码\r\n* mysqld -remove','',0,4,'arangda',1,1520677281,1520677281),(22,'虚拟环境Virtualenv','# 虚拟环境Virtualenv\r\n`virtualenv`是一个用于隔离Python环境的工具\r\n\r\n建议安装`virtualenv-1.9`及以后版本\r\n\r\n使用`pip`安装','# 虚拟环境Virtualenv\r\n`virtualenv`是一个用于隔离Python环境的工具\r\n\r\n建议安装`virtualenv-1.9`及以后版本\r\n\r\n使用`pip`安装`virtualenv`,我们建议使用`pip1.3`及以后版本\r\n\r\n我们建议不使用`easy_install`安装virtualenv当使用`setuptools < 0.9.7`\r\n\r\n### 安装方法\r\n1. 方法一 \r\n\r\n        $[sudo] pip install virtualenv\r\n2. 方法二   \r\n\r\n        $[sudo] pip install https://github.com/pypa/virtualenv/tarball/develop\r\n3. 方法三   \r\n\r\n        $ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz\r\n        $ tar xvfz virtualenv-X.X.tar.gz\r\n        $ cd virtualenv-X.X\r\n        $ [sudo] python setup.py install\r\n4. 方法四\r\n\r\n        $ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz\r\n        $ tar xvfz virtualenv-X.X.tar.gz\r\n        $ cd virtualenv-X.X\r\n        $ python virtualenv.py myVE\r\n        \r\n### 命令：\r\n* `https://www.python.org/downloads/` 下载python\r\n* 安装python2.7和python3.5，目录分别为`D:\\Python27`和`D:\\Python35`\r\n* 用py2.7的pip安装virtualenv\r\n\r\n        D:\\Python27\\Scripts\\pip.exe install virtualenv\r\n* 建立两个目录，分别作为py2和py3的工作环境\r\n\r\n        D:\\ENVS\\py2_env\r\n        D:\\ENVS\\py3_env\r\n* 用virtualenv为两个工作目录创建虚拟环境\r\n\r\n        D:\\Python27\\Scripts\\virtualenv -p D:\\Python27\\python.exe D:\\ENVS\\py2_env\r\n        D:\\Python27\\Scripts\\virtualenv -p D:\\Python35\\python.exe D:\\ENVS\\py3_env\r\n\r\n* `virtualenv env\' 创建隔离环境env(可指定目录)\r\n* `环境目录\\Scripts\\activate` 进入隔离环境\r\n        \r\n    `D:\\ENVS\\py2_env\\Scripts\\activate` 到py2_env下工作\r\n    `D:\\ENVS\\py3_env\\Scripts\\activate` 到py3_env下工作\r\n* `deactivate` 退出隔离环境\r\n* 安装django\r\n        \r\n        pip install django==1.10.6\r\n\r\n* 安装MySQLdb\r\n\r\n        pip install mysql-python 或者 pip install mysqlclient\r\n    提示\"Microsoft Visual C++ 9.0 is required\"\r\n    \r\n        pip install PyMySQL\r\n    在项目的`__init__.py`中添加   \r\n        \r\n        import pymysql\r\n        pymysql.install_as_MySQLdb()\r\n    \r\n* 安装markdown\r\n    \r\n        pip install markdown\r\n\r\n### centos下virtualenv\r\n\r\n* 下载Pyrhon3.5.4\r\n* tar zxvf Python-3.5.4.tgz 解压\r\n* 编译安装\r\n    \r\n        cd Python-3.5.4\r\n        ./configure --prefix=/usr/local/python35\r\n        make && make install\r\n\r\n    注意： 这里我们使用的是make altinstall，如果使用make install，你将会看到在系统中有两个不同版本的Python在/usr/bin/目录中。这将会导致很多问题，而且不好处理。\r\n    \r\n* 出现 gcc:Internal error:Killed (program cc1) \r\n    \r\n    系统没有交换分区, 编译过程中内存耗尽, 导致了编译中断 …\r\n    解决方式也很简单, 就是增加一个交换分区:\r\n\r\n    1. 创建分区文件, 大小 2G\r\n        \r\n            dd if=/dev/zero of=/swapfile bs=1k count=2048000\r\n    \r\n    2. 生成 swap 文件系统\r\n\r\n            mkswap /swapfile\r\n            \r\n    3. 激活 swap 文件\r\n\r\n            swapon /swapfile\r\n\r\n    这样就木有问题了, 但是这样并不能在系统重启的时候自动挂载交换分区, 这样我们就需要修改 fstab.\r\n    修改 /etc/fstab 文件, 新增如下内容:\r\n\r\n        /swapfile  swap  swap    defaults 0 0\r\n        \r\n    这样每次重启系统的时候就会自动加载 swap 文件了.\r\n    \r\n* 3.5.4版本的python安装目录 `/usr/local/python35/`\r\n    \r\n    2.7.13版本的python安装目录  `usr/local/python27`\r\n\r\n* 安装virtualenv  `pip install virtualenv`\r\n    \r\n    \r\n* 创建虚拟环境 `/var/ENVS/py2_env`和`/var/ENVS/py3_env`\r\n\r\n        * virtualenv -p /usr/local/python35/bin/python3 /var/ENVS/py3_env\r\n        * virtualenv -p /usr/local/python27/bin/python /var/ENVS/py2_env\r\n       遇到问题：virtualenv :command not found\r\n       解决:/usr/local/python27/bin/virtualenv -p /usr/local/python35/bin/python3 /var/ENVS/py3_env\r\n\r\n* 激活环境\r\n    \r\n    source /var/ENVS/py3_env/bin/activate\r\n\r\n* 激活本地虚拟环境，进入项目的根目录，运行`pip freeze > requirements.txt`\r\n    这时在根目录下生成requirements.txt的文本文件，其内容记录了项目的全部依赖\r\n\r\n* 在服务器上进入根目录，运行`pip install -r requirements.txt`,安装项目全部依赖','',0,4,'arangda',1,1520677317,1520677317),(23,'apache + mod_wsgi部署django','### apache + mod_wsgi部署django\r\n```\r\nLoadModule wsgi_module modules/mod_wsgi.so\r\n```\r\n```\r\n','### apache + mod_wsgi部署django\r\n```\r\nLoadModule wsgi_module modules/mod_wsgi.so\r\n```\r\n```\r\n<VirtualHost *:80>\r\n	WSGIScriptAlias / /var/www/blogproject/blogproject/wsgi.py\r\n    ServerName blog.arangda.com\r\n	Alias /static/ /var/www/blogproject/static/\r\n	<Directory /var/www/blogproject/static>\r\n		Order allow,deny\r\n        Allow from all\r\n	</Directory>\r\n	<Directory /var/www/blogproject/blogproject>\r\n	<Files wsgi.py>\r\n		Order allow,deny\r\n        Allow from all\r\n	</Files>\r\n	</Directory>\r\n</VirtualHost>\r\n```','',0,4,'arangda',1,1520677765,1520677765),(24,'Markdown','## 区块元素  \r\n\r\n### 标题\r\n类Atx形式则是在行首插入1到6个`#`，对应到标题1到6阶\r\n### 区块引用 Blockquotes\r\n区块引用 在每行的最前面加上`','## 区块元素  \r\n\r\n### 标题\r\n类Atx形式则是在行首插入1到6个`#`，对应到标题1到6阶\r\n### 区块引用 Blockquotes\r\n区块引用 在每行的最前面加上`>`\r\n>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n### 列表\r\n无序列表使用星号，加号或是减号作为列表标记：\r\n* Red\r\n* Green\r\n* Blue\r\n有序列表则使用数字接着一个英文句点\r\n1. Bird\r\n2. McHale\r\n3. Parish\r\n\r\n### 代码区块\r\n\r\nMarkdown会用`<pre>`和`<code>`标签来把代码区块包起来   \r\n缩进4个空格或者1个制表符就可以建立代码区块   \r\n或者，您可以使用 3 个反引号在代码块之前和之后，像这样：\r\n\r\n ```\r\n这是一个代码块\r\n ```\r\n\r\n若要使添加的代码块高亮，将代码语言的名称添加到紧随反引号之后：\r\n\r\n```javascript\r\nvar oldUnload = window.onbeforeunload;\r\nwindow.onbeforeunload = function() {\r\n    saveCoverage();\r\n    if (oldUnload) {\r\n        return oldUnload.apply(this, arguments);\r\n    }\r\n};\r\n```        \r\n注意：在代码块中插入代码块的Markdown格式时，需要在反引号之前添加空格，否则呈现的布局会超出你的预期。\r\n\r\n支持所有常见的编码语言，包括 C、 c++、 Java、 Scala，Python 和 JavaScript。\r\n\r\n### 分隔线\r\n可以在一行中用三个以上的星号，减号，底线来建立一个分隔线，行内不能有其他东西。可以在星号或者减号中间插入空格。\r\n## 区段元素\r\n### 链接\r\nmarkdown语法说明[点击查看](http://www.appinn.com/markdown \"markdown语法说明\")\r\n\r\nfrom [Google][1] than from [Yahoo][]\r\n\r\n[1]: http://google.com \"Google\" \r\n[yahoo]: http://search.yahoo.com \"Yahoo Search\"\r\n    markdown语法说明[点击查看](http://www.appinn.com/markdown \"markdown语法说明\")\r\n    \r\n    from [Google][1] than from [Yahoo][]\r\n    [1]: http://google.com \"Google\" \r\n    [yahoo]: http://search.yahoo.com \"Yahoo Search\"\r\n\r\n### 强调\r\n使用( * )或者( _ )作为标记强调字词的符号，\r\n用`*`或`_`包围的字词会转成`<em>`标签包围，用两个`*`或`_`包起来的话，则会被转成`<strong>`\r\n\r\n### 代码\r\n如果要标记一小段行内代码，可以用(`)包起来\r\n\r\n### 图片\r\n\r\n    ![Alt text](/path/to/img.jpg)\r\n\r\n    ![Alt text](/path/to/img.jpg \"Optional title\")\r\n\r\n### 表格\r\n|每天 |主食 |价格 |\r\n|- | :-: | -:\r\n| 周一|面<br>食|$6|\r\n| 周二|鸡|$8|\r\n\r\n语法说明： \r\n1. 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行代表一个表格行； \r\n2. 列与列之间用管道符号 “|” 隔开，原生方式的表格每一行的两边也要有管道符。 \r\n3. 可在第二行指定不同列单元格内容的对齐方式，默认为左对齐，在 “-” 右边加上 “:” 为右对齐，在 “-” 两侧同时加上 “:” 为居中对齐。\r\n\r\n### 反斜杠\r\n    \\* literal asterisks \\*\r\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\r\n```\r\n\\   反斜线\r\n`   反引号\r\n*   星号\r\n_   底线\r\n{}  花括号\r\n[]  方括号\r\n()  括弧\r\n#   井字号\r\n+   加号\r\n-   减号\r\n.   英文句点\r\n!   惊叹号\r\n```','',0,4,'arangda',1,1520677794,1520677794),(25,'在ubuntu上设置samba共享文件夹','1. 安装samba\r\n    * sudo apt-get install samba\r\n    * 无法定位软件包 samba\r\n    * sudo apt-get upda','1. 安装samba\r\n    * sudo apt-get install samba\r\n    * 无法定位软件包 samba\r\n    * sudo apt-get update 暂时不能解析域名，原因是dns没有配置，解决办法，加入dns服务器地址\r\n        * vi /etc/resolv.conf  加入如：nameserver 8.8.8.8\r\n2. 配置\r\n    * cp  /etc/samba/smb.conf  /etc/samba/smb.conf.bak   备份配置文件\r\n3. 打开/etc/samba/smb.conf 配置文件\r\n    * [share]\r\n          path = /home/arangda\r\n          available = yes\r\n          browseable = yes\r\n          writable = yes\r\n          public = yes\r\n    如果给目录指定用户，先创建用户\r\n```\r\n    root@worker:/home# userdel spark \r\n    root@worker:/home# useradd -r -m -s /bin/bash spark \r\n    root@worker:/home# passwd spark \r\n```\r\n    再对samba添加用户密码\r\n    smbpasswd -a arangda 添加用户，设置密码\r\n    然后如下设置\r\n    * [arangda]\r\n          path = /var/www\r\n          available = yes\r\n          browseable = no\r\n          writable = yes\r\n          public = no\r\n          valid user = arangda\r\n4. 重启samba\r\n    * sudo service smbd restart\r\n5. 在windows中，\\\\172.16.5.88\\share 进行访问\r\n6. 在个别电脑连接时，出现“不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接。中断与此服务器或\r\n共享资源的所有连接，然后再试一次...”，在cmd下运行`net use * /del /y`来清除系统记录列表。实测有效！','',0,4,'arangda',1,1521535687,1544943295),(26,'apache中添加新站的配置','1. 在ports.conf中添加端口\r\n2. 在/etc/apache2/sites-available/guahao.conf中配置VirtualHost\r\n3. ln -s ','1. 在ports.conf中添加端口\r\n2. 在/etc/apache2/sites-available/guahao.conf中配置VirtualHost\r\n3. ln -s /etc/apache2/sites-.....\r\n4. service apache2 restart','',0,4,'arangda',1,1521623634,1522565021),(27,'git fatal: Out of memory, malloc failed','设置交换空间大小（我的是这么解决的）\r\n0. 查看内存使用情况和swap的大小\r\n1. 关闭swap swapoff -a\r\n2. 设置swap的大小  dd if=/dev/ze','设置交换空间大小（我的是这么解决的）\r\n0. 查看内存使用情况和swap的大小\r\n1. 关闭swap swapoff -a\r\n2. 设置swap的大小  dd if=/dev/zero of=/swapfile bs=1M count=5120\r\n    >bs指的是Block Size，就是每一块的大小。这里的例子是1M，意思就是count是以1M为单位的。\r\n    count是告诉程序，新的swapfile要多少个block。新的swap文件是5G大小。\r\n    >注意：可能需要点时间完成此步，耐心等待完成。\r\n3. 将增大后的文件变为swap文件 mkswap /swapfile\r\n4. 重新打开swap   swapon /swapfile\r\n5. 让swap在启动的时候，自动生效。打开/etc/fstab文件，加上以下命令。然后保存。\r\n        `/swapfile swap swap defaults 0 0`\r\n        或者执行下面命令\r\n        `echo\"/swapfile swap swap defaults 0 0\" >>/etc/fstab`\r\n6.再次查看swap大小\r\n        free -m ','',0,4,'arangda',1,1522033978,1522285235),(28,'安装配置samba服务器','1. 安装samba服务\r\n\r\n```\r\n#yum install samba -y\r\n```\r\n\r\n2. 修改配置文件\r\n\r\n```\r\n# cd /etc/samba\r\n# cp','1. 安装samba服务\r\n\r\n```\r\n#yum install samba -y\r\n```\r\n\r\n2. 修改配置文件\r\n\r\n```\r\n# cd /etc/samba\r\n# cp smb.conf smb.conf.bak 备份\r\n# vim smb.conf \r\n```\r\n   \r\n   * 这里才是与密码有关的设定项目！\r\n    security = share\r\n   * 分享的资源设定方面：\r\n```\r\n[temp]                            #分享资源名称\r\ncomment    = Temporary file space  #简单的解释此资源\r\npath      = /tmp                  #实际 Linux 分享的目录\r\nwritable  = yes                  #是否可写入？在此例为是的\r\nbrowseable = yes                  #能不能被浏览到资源名称\r\nguest ok  = yes                  #单纯分享时，让用户随意登入的设定值\r\n\r\n```\r\n\r\n\r\n修改完成后，保存退出。\r\n\r\n3. testparm 检查 smb.conf 的语法是否正确\r\n    \r\n    `testparm`\r\n   \r\n   当出现有一下这句话时`Loaded services file OK.`说明当前配置正确，如有错误根据提示修改直到无误。\r\n\r\n4.启动服务并查看端口\r\n\r\n```\r\n#/etc/init.d/smb start\r\n#netstat -tplnu | grep smb\r\n``` \r\n\r\n5. 打开失败，查看防火墙\r\n\r\n    * service iptables status\r\n    \r\n6. nmap 172.16.3.34 80 查看端口是否可用\r\n   或者 telnet ip port   测试','',0,4,'arangda',1,1522285535,1522285535),(29,'mysql主从数据库同步','1. MySQL从3.23.15版本以后提供数据库复制（replication）功能，利用该功能可以实现两个数据库同步、主从模式、互相备份模式的功能。本文档主要阐述了如何在linu','1. MySQL从3.23.15版本以后提供数据库复制（replication）功能，利用该功能可以实现两个数据库同步、主从模式、互相备份模式的功能。本文档主要阐述了如何在linux系统中利用mysql的replication进行双机热备的配置。数据库同步复制功能的设置都在MySQL的配置文件中体现\r\n\r\n2. A: 172.16.5.88（主,MASTER）\r\nB: 172.16.5.100(从,SLAVE)\r\n\r\n3. 配置A主(master) B从(slave)模式\r\n* 打发第三方\r\n    * 对方水电费\r\n* 打发第三方\r\n\r\n4. 配置MASTER\r\n\r\n* 增加一个用户同步使用的账号\r\n```\r\nGRANT FILE ON *.* TO \'backup\'@\'172.16.5.100\' IDENTIFIED BY \'1234\';\r\nGRANT REPLICATION SLAVE ON *.* TO \'backup\'@\'172.16.5.100\' IDENTIFIED BY \'1234\';\r\n```\r\n* 增加一个数据库作为同步数据库：\r\n\r\n		create database test;\r\n\r\n* 创建一个表结构：\r\n\r\n		create table mytest (username varchar(20),password varchar(20));\r\n\r\n*  find / -name my.cnf找到mysql配置文件/etc/mysql/mysql.conf.d/mysqld.cnf\r\n\r\n* 在mysqld.cnf中加入\r\n```\r\nserver-id = 1      #Server 标识\r\nlog-bin = ****  #默认\r\nbinlog-do-db=test  #指定需要日志的数据库\r\n```\r\n* 重启数据库服务，service mysql restart,查看server-id:show variables like \'server_id\',发现server-id的value值是0，那是因为mysqld.cnf编辑时候权限设置为了777，改成644后重启就生效了。\r\n\r\n*  查看主服务器二进制日志名和偏移量\r\n\r\n		show master status \\G\r\n\r\n5. 配置从数据库\r\n\r\n* 在mysqld.cnf中加入\r\n```\r\nserver-id=2\r\nrelay-log=/var/lib/mysql/relay-log\r\n```\r\n\r\n* 在从服务器上指定master,启动slave线程\r\n```\r\nmysql> stop slave;\r\nmysql> CHANGE MASTER TO MASTER_HOST=\'172.16.5.88\',\r\n	-> MASTER_USER=\'backup\',\r\n	-> MASTER_PASSWORD=\'1234\',\r\n	-> MASTER_LOG_FILE=\'mysql-bin.000001\',\r\n	-> MASTER_LOG_POS=154;\r\nmysql> start slave;\r\n```\r\n\r\n* 在从服务器上执行show slave status\\G 查询从服务器状态。\r\n备注：Slave_IO_Running和Slave_SQL_Running都为yes才表示同步成功\r\n    \r\n6. Last_SQL_Error: Could not executeUpdate_rows event on table eip_fileservice.T_FILE_LOCATION; Can\'t find recordin \'T_FILE_LOCATION\', Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; theevent\'s master log master1-bin.001025, end_log_pos 713922982\r\n注：这个问题因为时间精力有限没有解决，以后有空再研究吧\r\n','',0,4,'arangda',1,1524451155,1524983928),(30,'织梦编辑器设置中文字体','1. dedecms程序 include/ckeditor/下找到config.js文件\r\n2. config.font_names = \'宋体/宋体;黑体/黑体;仿宋/仿宋;楷体','1. dedecms程序 include/ckeditor/下找到config.js文件\r\n2. config.font_names = \'宋体/宋体;黑体/黑体;仿宋/仿宋;楷体/楷体;隶书/隶书;幼圆/幼圆;微软雅黑/微软雅黑;\' + config.font_names;\r\n粘贴到下面的{ }里面\r\nCKEDITOR.editorConfig = function( config )\r\n{\r\n}\r\n3. 清除浏览器历史记录，ok\r\n4. 替换中文之后，可能会出现中文字体乱码,根据织梦版本将config.js编码改成utf-8或者gb2312\r\n\r\n','',1,4,'arangda',1,1524472760,1524472760),(31,'多个织梦站点文章页和列表页共用上传图片','1. /include/extend.func.php增加函数：\r\n```\r\n//文章页用\r\nfunction replaceurl($newurl)\r\n{\r\n	$newurl=s','1. /include/extend.func.php增加函数：\r\n```\r\n//文章页用\r\nfunction replaceurl($newurl)\r\n{\r\n	$newurl=str_replace(\'src=\"/uploads/allimg/\',\'src=\"http://bd.xafkyy.cn/uploads/allimg/\',$newurl);\r\n	return $newurl;\r\n}\r\n//列表页用，获取缩略图\r\nfunction litimg($str_pic)\r\n{\r\n    $str_sub= \'http://bd.xafkyy.cn\'.$str_pic;\r\n    return $str_sub;\r\n}\r\n```\r\n2. 修改文章页模板：将调用文章内容的标签：{dede:field.body/}改为：{dede:field.body function=\'replaceurl(@me)\' /}\r\n生成文章，图片显示了。\r\n3. 列表页模板中调用：[field:litpic function=litimg(\'@me\')/]\r\n\r\n{dede:field name=\'litpic\' function=\"bigimg(@me)\"/}\r\n\r\n','',0,4,'arangda',1,1524472848,1526871372),(32,'织梦登录页验证码不显示','1. ` ; extension=php_gd2.dl  ` 开启php.ini中此项\r\n2.  `var_dump(gd_info());` 是否打印出gd库信息\r\n3.  ap','1. ` ; extension=php_gd2.dl  ` 开启php.ini中此项\r\n2.  `var_dump(gd_info());` 是否打印出gd库信息\r\n3.  apt-get install php7.0-gd 安装GD库\r\n4.  重启apache','',0,4,'arangda',1,1524472990,1524472990),(33,'ubuntu 16.04 server 配置lamp环境','1. 安装apache \r\n    * sudo apt-get install apache2\r\n    > 报错E:无法定位软件包apache2, 更新软件源解决:`sudo ','1. 安装apache \r\n    * sudo apt-get install apache2\r\n    > 报错E:无法定位软件包apache2, 更新软件源解决:`sudo apt-get update`\r\n2. 修改DNS,`sudo vi /etc/resolvconf/resolv.conf.d/base`,`nameserver 8.8.8.8`,保存退出，重启网络`sudo /etc/init.d/networking restart`,查看当前DNS `cat /etc/resolv.conf`\r\n3. 安装PHP和Apache PHP模块\r\n        \r\n        apt-get install php7.0 libapache2-mod-php7.0\r\n\r\n    然后重启Apache\r\n        \r\n        systemctl restart apache2\r\n        \r\n4. 安装mysql\r\n\r\n        apt-get install mysql-server\r\n        \r\n5. 为了使 PHP 支持 MySQL，可以安装 php7.0-mysql 包。同时也可以安装其他所需要的 PHP 模块，使用下面命令来搜索可用的 PHP 模块：\r\n    \r\n        apt-cache search php7.0\r\n\r\n	选择一些模块，安装之：\r\n\r\n        apt-get -y install php7.0-mysql php7.0-curl php7.0-gd php7.0-intl php-pear php-imagick php7.0-imap php7.0-mcrypt php-memcache  php7.0-pspell php7.0-recode php7.0-sqlite3 php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-mbstring php-gettext\r\n        \r\n	重启Apache2\r\n\r\n        sudo systemctl restart apache2\r\n        \r\n6.  重启mysql,apache2(另)\r\n        \r\n        sudo service mysql restart\r\n\r\n        sudo service apache2 restart\r\n\r\n7. 安装phpmyadmin\r\n\r\n        sudo apt-get install phpmyadmin\r\n    \r\n    浏览器访问：ip/phpmyadmin\r\n    \r\n8. 配置Apache\r\n\r\n        vi /etc/apache2/apache2.conf\r\n','',1,4,'arangda',1,1524983427,1524983587),(34,'#ubuntu挂载新硬盘','1. ## 硬盘分区\r\n* 显示硬盘及所属分区情况。在终端窗口中输入如下命令：\r\n```\r\nsudo fdisk -lu\r\n```\r\n* 对硬盘进行分区。在终端窗口中输入如下命令：','1. ## 硬盘分区\r\n* 显示硬盘及所属分区情况。在终端窗口中输入如下命令：\r\n```\r\nsudo fdisk -lu\r\n```\r\n* 对硬盘进行分区。在终端窗口中输入如下命令：\r\n```\r\nsudo fdisk /dev/sdb\r\n```\r\n如下图所示：\r\n在Command (m for help)提示符后面输入`m`显示一个帮助菜单。\r\n在Command (m for help)提示符后面输入`n`，执行 add a new partition 指令给硬盘增加一个新分区。\r\n出现Command action时，输入`e`，指定分区为扩展分区（extended）。\r\n出现Partition number(1-4)时，输入`１`表示只分一个区。\r\n后续指定起启柱面（cylinder）号完成分区。\r\n在Command (m for help)提示符后面输入`p`，显示分区表。\r\n在Command (m for help)提示符后面输入`w`，保存分区表。\r\n在终端窗口中输入如下命令：\r\n```\r\nsudo fdisk -lu\r\n```\r\n看系统已经识别了硬盘 /dev/sdb 的分区。\r\n \r\n2. ## 硬盘格式化\r\n* 显示硬盘及所属分区情况。在终端窗口中输入如下命令：\r\n```\r\nsudo mkfs -t ext4 /dev/sdb\r\n```\r\n说明：\r\n-t ext4 表示将分区格式化成ext4文件系统类型。\r\n  \r\n3. ## 挂载硬盘分区\r\n* 显示硬盘挂载情况。在终端窗口中输入如下命令：\r\n```\r\nsudo df -l\r\n```\r\n新硬盘分区没有挂载，无法进入和查看。\r\n在终端窗口中输入如下命令：\r\n```\r\nsudo mount -t ext4 /dev/vdb /data\r\n```\r\n说明：\r\n指定硬盘分区文件系统类型为ext4 ，同时将 /dev/vdb 分区挂载到目录 /data。\r\n再次在终端窗口中输入如下命令：\r\n```\r\nsudo df -l\r\n```\r\n\r\n4.  ## 配置硬盘在系统启动自动挂载。在文件 /etc/fstab 中加入如下配置：\r\n* 查看磁盘分区的UUID\r\n```\r\nsudo blkid  \r\n```\r\n* 配置开机自动挂载：\r\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\r\n```\r\nsudo vim /etc/fstab\r\nUUID=896735e1-6b86-4064-b06e-1150adde94f5     /data     ext4     defaults     0     1\r\n```\r\n* 命令验证一下配置是否正确\r\n```\r\nsudo mount -a\r\n```\r\n\r\n','',0,4,'arangda',1,1526782750,1526783086),(35,'ubuntu系统VSFTP安装配置','1. 安装 `apt-get install vsftpd`\r\n2. 测试是否安装成功 `service vsftpd restart`\r\n3. 新建用户ftp目录并将权限设置为7','1. 安装 `apt-get install vsftpd`\r\n2. 测试是否安装成功 `service vsftpd restart`\r\n3. 新建用户ftp目录并将权限设置为777   /home/uftp \r\n4. 创建用户` sudo useradd -d /home/uftp -s /bin/bash uftp`,修改密码 `sudo passwd uftp`（我的x*****8）\r\n5. 配置文件 /etc/vsftpd.conf\r\n6. 使用下列命令，可以看到系统中多了ftp用户组和ftp用户\r\n```\r\ncat /etc/group\r\ncat /etc/passwd\r\n```\r\n7. 配置vsftpd.conf\r\n编辑/etc/vsftpd.conf文件:\r\n```\r\nanonymous_enable=NO 拒绝匿名用户登录\r\nwrite_enable=YES 设置可以上传文件，将“write_enable=YES”前面的#取消。\r\nchroot_local_user=YES\r\nchroot_list_enable=YES\r\nchroot_list_file=/etc/vsftpd.chroot_list\r\n```\r\n上面的这几个配置实现的功能是：用户被限制在自己的主目录下。如果有例外则加上后边两条\r\n```\r\n/etc/vsftpd.chroot_list（需要自己创建这个文件）\r\n```\r\n* 出现错误vsftpd: refusing to run with writable root inside chroot()，加上`allow_writeable_chroot=YES`，解决\r\n8. 启动vsftpd或者重启\r\n```\r\n    systemctl start vsftpd 或 service vsftpd start\r\n    systemctl restart vsftpd 或 service vsftpd restart\r\n```\r\n9. /etc/ftpusers 这里面的用户不能登录FTP\r\n10. 不同用户对应一个目录不能下载？ 设置local_umask=011\r\n11. 禁止ftp账户ssh,解决方法：修改`/etc/shells`，在shell列表中添加一行`/usr/bin/nologin`。把ftp用户的shell改为/usr/bin/nologin=>`usermod -s /usr/bin/nologin username`  \r\n12. 修改ftp账户的默认目录，在 sudo vim /etc/passwd 里边找到要修改的用户修改路径，或者usermod -d <新目录> <用户名>','',0,4,'arangda',1,1526786712,1526786965),(36,'ubuntu16.04 下lnmp安装','## 安装nginx ##\r\n\r\n查询硬盘大小 `df -lh`\r\n\r\n通过控制台Terminal，执行ps的帮助命令“ps --help a”查看ps命令支持的参数列表。\r\n在控','## 安装nginx ##\r\n\r\n查询硬盘大小 `df -lh`\r\n\r\n通过控制台Terminal，执行ps的帮助命令“ps --help a”查看ps命令支持的参数列表。\r\n在控制台使用ps命令“ps -aux|less”，查看当前系统正在运行的所有进程。\r\n为了确保获得最新的 Nginx，可以先使用 `sudo apt-get update` 命令更新源列表\r\n用`apt-get install nginx`安装(我之前安装了apache,要把端口改下，我改成8080，不然会报错)\r\n安装好之后，使用 `dpkg -S nginx` 命令来搜索nginx相关文件，可以从命令显示结果看出 Nginx默认的安装位置是/etc/nginx目录，其配置文件nginx.conf也是在该目录下，并且在 etc/init.d 下有 nginx的启动程序，该目录下的程序都会在系统开启时启动。\r\n\r\nnginx 版本查看   `nginx -v   1.10`\r\n在配置文件中加 max_ranges 1;   //建议升级到1.13.3和1.12.1版本；如果不能升级，可以在Nginx配置文件中添加max_ranges 1，从而禁用multipart range。\r\n此外，Nginx的默认网站目录是 /var/www/html，默认Nginx网站配置文件为 /etc/nginx/sites-available/default 。\r\n\r\n启动 Nginx服务，使用下面两个命令任意一个即可：\r\n\r\nsudo /etc/init.d/nginx start \r\nsudo service nginx start\r\n\r\n使用 netstat -anp 则可以看到80端口已经处于 LISTEN状态了。 (使用 netstat -tunlp 列出网络服务)\r\n直接查看80端口可以使用命令：sudo lsof -i :80\r\n\r\n在浏览器输入 127.0.0.1后，就可以看见 Nginx的欢迎页面了。\r\n\r\n## 安装php-fpm ## \r\n```\r\napt-get -y install php7.0-fpm   \r\n```\r\n修改配置文件 `sudo vim /etc/php/7.0/fpm/pool.d/www.conf` 的listen\r\n 与 Nginx监听同一个 sock\r\n```\r\nlisten = /run/php/php7.1-fpm.sock\r\n```\r\nnginx 和fastcgi通信有2种方式，一种是TCP方式，还有种是UNIX Socket方式\r\n默认是socket方式\r\n\r\n修改重启下 php-fpm7.0\r\n```\r\nsudo service php-fpm7.0 restart （/etc/init.d/php7.0-fpm restart）\r\n```\r\n网站配置文件中修改如下\r\n```\r\nlocation ~ \\.php$ {\r\n        include snippets/fastcgi-php.conf;\r\n        # With php7.0-cgi alone:\r\n        # fastcgi_pass 127.0.0.1:9000;\r\n        # With php7.0-fpm:\r\n        fastcgi_pass unix:/run/php/php7.1-fpm.sock;\r\n    }\r\n```\r\nsocket方式 必须和上面socket的listen路径一样\r\n\r\nvi /etc/php/7.0/fpm/php.ini`将cgi.fix_pathinfo=1这一行去掉注释，将1改为0.\r\n\r\n> “值为1时，php的解释器会尽可能的去解析客户端请求的文件各种类型，这会引发一些安全漏洞，设置为0时，解释器只会去解析特定的文件类型，设置为0是一种相对安全的处理策略。”—引用自MacTalk《趣谈个人建站》\r\n\r\n> Job for nginx.service failed because the control process exited with error code. See \"systemctl status nginx.service\" and \"journalctl -xe\" for details.\r\n启动nginx出现上面错误：将配置文件中的default_server去掉，ok.\r\n\r\n> 打开网站提示无法连接\r\n    配置防火墙开启81端口 sudo ufw allow 81   \r\n    /etc/ufw/user.rules  在这个文件中查看添加的防火墙规则\r\n> 解决Nginx出现403 forbidden的问题\r\n    index 后加index.php\r\n> 织梦后台登录验证码不正确，chown -R www-data:www-data ****。解决【nginx的默认用户和用户组是www-data（在nginx.conf中配置）】\r\n\r\n## 安装mysql ##\r\n\r\n```\r\napt-get install mysql-server mysql-client php7.0-mysql\r\n```\r\n## 配置301,401##\r\n\r\n* pc站设置301，在配置文件中加如下代码\r\n\r\n```\r\nserver {\r\n    server_name 22vd.com;\r\n    rewrite ^(.*) http://www.22vd.com$1 permanent;\r\n    }\r\n```\r\n\r\n* 404页面设置   error_page 404 /errpage/404.html\r\n\r\n## lnmp优化 ##\r\n\r\n运行以下命令可以获知你的机器有多少个处理器：\r\nLinux上 \r\ncat /proc/cpuinfo | grep processor\r\n将nginx.conf文件中work_processes的值设置为机器的处理器核数。（设置为“auto”将尝试自动检测它）\r\n同时，增大worker_connections（每个处理器核心可以处理多少个连接）的值，以及将\"multi_accept\"设置为ON，如果你使用的是Linux，则也使用\"epoll\"：\r\n```\r\nworker_processes 4; \r\nworker_rlimit_nofile 100000; \r\nevents模块中包含nginx中所有处理连接的设置。\r\n\r\nevents { \r\nworker_connections 2048;   设置可由一个worker进程同时打开的最大连接数\r\nmulti_accept on; \r\nuse epoll;       //#epoll是多路复用IO(I/O Multiplexing)中的一种方式,仅用于linux2.6以上内核,可以大大提高nginx的性能\r\n} \r\n```\r\n查看服务器可以打开的文件句柄数是多少：\r\n    # $ cat /proc/sys/fs/file-max   //我的783792\r\naccess_log off; 设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)\r\n\r\nkeepalive_timeout 10; \r\nclient_header_timeout 10; \r\nclient_body_timeout 10; \r\nreset_timedout_connection on; \r\nsend_timeout 10; \r\nkeepalive_timeout  给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接。我们将它设置低些可以让ngnix持续工作的时间更长。\r\n\r\nclient_header_timeout 和client_body_timeout 设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些。\r\n\r\nreset_timeout_connection 告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。\r\n\r\nsend_timeout 指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。\r\n\r\n\r\n### php-fpm.conf参数优化 ###\r\n\r\n删除value name=\"display_errors\" 这一行的代码，防止坏人从PHP错误中找到漏洞。\r\n\r\nmax_children默认参数是开启5个进程。数值要根据内存大小来定，每一个php-cgi所耗费的内存在20M左右。\r\n\r\n126M内存默认即可\r\n256M 10个\r\n512M 20个\r\n1G 40个\r\n使用类似ServerDensity的东西。\r\npm.max_children：静态方式下开启的php-fpm进程数量。 \r\npm.start_servers：动态方式下的起始php-fpm进程数量。 \r\npm.min_spare_servers：动态方式下的最小php-fpm进程数量。 \r\npm.max_spare_servers：动态方式下的最大php-fpm进程数量。\r\n如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置的数量个php-fpm进程。\r\n\r\n如果dm设置为dynamic，那么pm.max_children参数失效，后面3个参数生效。系统会在php-fpm运行开始的时候启动 pm.start_servers个php-fpm进程，然后根据系统的需求动态在pm.min_spare_servers和 pm.max_spare_servers之间调整php-fpm进程数。\r\n\r\n那么，对于我们的服务器，选择哪种执行方式比较好呢？事实上，跟Apache一样，我们运行的PHP程序在执行完成后，或多或少会有内存泄露的问 题。这也是为什么开始的时候一个php-fpm进程只占用3M左右内存，运行一段时间后就会上升到20-30M的原因了。所以，动态方式因为会结束掉多余 的进程，可以回收释放一些内存，所以推荐在内存较少的服务器或者VPS上使用。具体最大数量根据 内存/20M 得到。比如说512M的VPS，建议pm.max_spare_servers设置为20。至于pm.min_spare_servers，则建议根据服 务器的负载情况来设置，比较合适的值在5~10之间。\r\n\r\n然后对于比较大内存的服务器来说，设置为静态的话会提高效率。因为频繁开关php-fpm进程也会有时滞，所以内存够大的情况下开静态效果会更好。数量也可以根据 内存/30M 得到。比如说2GB内存的服务器，可以设置为50；4GB内存可以设置为100等。\r\n\r\n有一个捷径，来配置你的max_children数， 就是你前期先把max_childnren设置成一个比较大的值，稳定运行一段时间后，观察fpm的status里的 max active processes 是多少，然后把max_children配置比他大一些就ok了。\r\n','',0,4,'arangda',1,1526788226,1526788833),(37,'搭建自己的git服务','1. linux安装git\r\n    * yum -y install git    //centos\r\n    * sudo apt-get install git     //','1. linux安装git\r\n    * yum -y install git    //centos\r\n    * sudo apt-get install git     //ubuntu\r\n2. 创建一个git用户，用来运行git服务\r\n    * 创建git用户：\r\n        * adduser git\r\n    * 切换到git用户:\r\n        * su git\r\n        * 代码部署目录的拥有者是www   而我的.git版本库的拥有者是git    但是www目录clone出来的文件夹的拥有者是www\r\n3. 创建裸库\r\n    * 在/home/git目录下创建pro.git裸库：\r\n    * cd /home/git\r\n    * git init --bare pro.git\r\n	\r\n4. 配置公钥\r\n    * 首先在客户端打开bash查询是否存在公匙：\r\n        * cd ~/.ssh\r\n        * ls           //查看是否存在公钥\r\n    * 若不存在公匙，则生成：\r\n        * ssh-keygen -t rsa\r\n    * 查看密匙：\r\n        * cat id_rsa.pub\r\n        * ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHCa50IaBs1zOdScFXSp4RSm88MD+jmv0u3dJRyVOFyFkUTmhuP2F1V8+ZSv8jP4B66QpvNC2tV2qHh08n8WVGWsddo4ZxcxILeAakgzM68yx49neba8El99Ns5UpCipcryj/CI8R/7B01HJC3Pbmz5n+nO6ueYzZqlWFTQ5LSn72mBE2FJ9XFdBl7INb5S7UyYCaCQ4D+r1RNOt2Ta+0V9xQI/MsYT2MtMUnmL5nj9tc9fvWHUbCQClVLvQwWGs+fN54NvgmGLXV/g1WVKhsxPJpdnWhN+eYs8z30BuiK12tWBrF51psSbpUej1dEcfsMBGYAFlogDNJ/keD+6vL9 273890638@qq.com\r\n\r\n		\r\n5. 下面我们复制id_rsa.pub里的公钥到服务器的authorized_keys文件中：\r\n    * 首先建文件夹：\r\n        * mkdir .ssh\r\n        * ls -a\r\n    * 再配置/home/git/.ssh/autoirized_keys,复制id_rsa.pub里的公钥到服务器的authorized_keys文件\r\n	服务器端存放的叫裸库(bare)，你可以认为就是你的仓库的.git/目录下面的那些东西，不包含工作区(working space)。直接git clone --bare也可以直接拿到裸库做服务端，从裸库还原出工作区只需要git clone一次即可。\r\n	```\r\n    git clone project001.git pj001\r\n    cd pj001\r\n    git checkout master\r\n    ```\r\n6. windows使用git时出现：warning: LF will be replaced by CRLF\r\n	* $ git config --global core.autocrlf false  //禁用自动转换  \r\n	\r\n7. fatal:bad numeric config value \'=\' for \'pack.deltacachesize\':invalid unit\r\n    * git config --edit --global\r\n8. 已经删除的文件同步\r\n    * git status 先查看哪些删除\r\n    * 然后git add 删除的文件\r\n    * git commit ,git push 就可以了\r\n9. 从git用户切换到root，提示git is not in the sudoers file，将git加入sudo\r\n10. push的时候，提示`error: insufficient permission for adding an object to repository database ./objects`，进入.git中，本该drwxrwxr-x git git,改后ok\r\n11. 我这里路由器设置，本地公网ip：89端口对应私网22端口，只能用`git clone ssh://git@公网ip:89/home/git/xxx.git`\r\n12. git 解决fatal: Not a git repository\r\n    * git init就可以了！','',0,4,'arangda',1,1530087082,1530087082),(38,'swap内存太小设置','设置交换空间大小\r\n    0. 查看内存使用情况和swap的大小\r\n    1. 关闭swap swapoff -a\r\n    2. 设置swap的大小  dd if=/dev/','设置交换空间大小\r\n    0. 查看内存使用情况和swap的大小\r\n    1. 关闭swap swapoff -a\r\n    2. 设置swap的大小  dd if=/dev/zero of=/swapfile bs=1M count=5120\r\n    >bs指的是Block Size，就是每一块的大小。这里的例子是1M，意思就是count是以1M为单位的。\r\n    count是告诉程序，新的swapfile要多少个block。新的swap文件是5G大小。\r\n    >注意：可能需要点时间完成此步，耐心等待完成。\r\n    3. 将增大后的文件变为swap文件 mkswap /swapfile\r\n    4. 重新打开swap   swapon /swapfile\r\n    5. 让swap在启动的时候，自动生效。打开/etc/fstab文件，加上以下命令。然后保存。\r\n        `/swapfile swap swap defaults 0 0`\r\n        或者执行下面命令\r\n        `echo\"/swapfile swap swap defaults 0 0\" >>/etc/fstab`\r\n    6.再次查看swap大小\r\n        free -m\r\n','',0,4,'arangda',1,1530088226,1530088226),(39,'yii程序搬迁','1. 用git上传到github远程仓库\r\n2. 服务器上安装git\r\n3. ssh-keygen -t rsa -C \"youremail@example.com\" 创建SSH ','1. 用git上传到github远程仓库\r\n2. 服务器上安装git\r\n3. ssh-keygen -t rsa -C \"youremail@example.com\" 创建SSH Key,并在github.com 的setting中添加\r\n4. git clone到服务器\r\n5. 安装composer\r\n    * curl -sS https://getcomposer.org/installer | php\r\n    * 全局调用mv composer.phar /usr/local/bin/composer\r\n    * 安装curl 参考 https://www.cnblogs.com/xing901022/p/4652624.html\r\n    * 将curl放到c:/windows/system32下，可全局执行\r\n    * 如果php不是全局配置，到php安装目录执行上面curl命令\r\n    * PHP composer-setup安装遇到的openssl extension is missing  ==>php.ini文件，并开启extension=php_openssl.dll。\r\n    * openssl版本低的问题，将php从5.4换成5.6版本\r\n    * composer不是内部或外部命令\r\n    * windows 下载Composer-Setup.exe 进行安装\r\n    * 上面的没有安装成功，试下下面的安装方法\r\n        ```\r\n        php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\n        php -r \"if (hash_file(\'SHA384\', \'composer-setup.php\') === \'544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;\"\r\n        php composer-setup.php\r\n        php -r \"unlink(\'composer-setup.php\');\" //删除\r\n        ```\r\n\r\n    * 使用packagist镜像 composer config -g repo.packagist composer https://packagist.phpcomposer.com\r\n    *  全局配置：将composer.phar文件复制到php.exe文件目录下,并创建composer.bat文件 将 `@php \"%~dp0composer.phar\" %*`  放到composer文件中\r\n\r\n6. 执行composer update\r\n7. init 初始化环境\r\n8. redactor编辑器出现图片不能上传\r\n    * 保证你的php支持fileinfo扩展。打开php.ini文件去掉fileinfo前面的分号即可\r\n    * 配置中改成\'uploadUrl\' => \'http://image.xahsz.cn\',\r\n9. 上传到centos后目录权限\r\n    * api/runtime\r\n    * api/web/assets\r\n\r\n10. yii\\web\\Request::cookieValidationKey must be configured with a secret key\r\n    * 在main-local中cookieValidationKey 填上值\r\n    \r\n11. 结合以上配置说明可以发现Apache的配置文件非常的模块化，启用模块、虚拟主机都非常的简单。\r\n下面是启用mod_rewrite模块的方法。\r\n* 第一种方式：\r\nsudo a2enmod rewrite\r\n* 第二种方式：\r\nsudo ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load\r\n','',0,4,'arangda',1,1530088462,1530088462),(40,'yii2 HeadersAlreadySentException 报错 解决方案','在页面中echo ; print_R() ; var_dump();等形式的输出时报以上错误; 和以下代码冲突。\r\n\r\n加一断点 exit;\r\n','在页面中echo ; print_R() ; var_dump();等形式的输出时报以上错误; 和以下代码冲突。\r\n\r\n加一断点 exit;\r\n','',2,4,'arangda',1,1542380253,1542380253),(41,'yii2进行公众号开发提示“该公众号提供的服务出现故障，请稍后再试”','服务器地址配置成功，如`http://api.xahsz.cn/****/*****`\r\n设置关注公众号后后台处理完返回消息，但返回的是“该公众号提供的服务出现故障，请稍后再试”，','服务器地址配置成功，如`http://api.xahsz.cn/****/*****`\r\n设置关注公众号后后台处理完返回消息，但返回的是“该公众号提供的服务出现故障，请稍后再试”，\r\n于是在文件中加入下面代码，看是否执行到此，结果没有\r\n\r\n    file_put_contents(\'subscribe.txt\',\"gggguuuuu\",FILE_APPEND);\r\n\r\n费了几个小时终于想到yii2,可以对api的post数据进行阻止，如下写就ok了\r\n\r\n    [\r\n        \'class\'=>\'yii\\rest\\UrlRule\',\r\n        \'controller\'=>\'gzh\',\r\n        \'extraPatterns\' => [\r\n            \'GET valid\' => \'valid\',\r\n            \'POST valid\' => \'valid\',\r\n            ],\r\n    ],','',2,4,'arangda',1,1542588577,1542588577),(42,'php面向对象','1. 对象\r\n    对象在PHP里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的，在运行的时候都要加载到内存中去用， 那么对象在内存里面是怎么体现的呢？内存从罗辑','1. 对象\r\n    对象在PHP里面和整型、浮点型一样，也是一种数据类，都是存储不同类型数据用的，在运行的时候都要加载到内存中去用， 那么对象在内存里面是怎么体现的呢？内存从罗辑上说大体上是分为4段， 栈空间段， 堆空间段，代码段， 初使化静态段，程序里面不同的声明放在不同的内存段里面，栈空间段是存储占用相同空间长度并且占用空间小的数据类型的地方，比如说整型1， 10， 100， 1000， 10000， 100000等等，在内存里面占用空间是等长的，都是64位4个字节。那么数据长度不定长，而且占有空间很大的数据类型的数据放在那内存的那个段里面呢？这样的数据是放在堆内存里面的。栈内存是可以直接存取的，而堆内存是不可以直接存取的内存。对于我们的对象来说就是一种大的数据类型而且是占用空间不定长的类型，所以说对象是放在堆里面的，但对象名称是放在栈里面的，这样通过对象名称就可以使用对象了。\r\n`$p1=new Person();`\r\n对于这条代码， $p1是对象名称在栈内存里面，new Person()是真正的对象是在堆内存里面的\r\n\r\n2. 构造方法`__construct()`与析构方法`__destruct()`\r\n3. 继承\r\n    但是在PHP和Java语言里面没有多继承，只有单继承，也就是说，一个类只能直接从一个类中继承数据， 这就是我们所说的单继承。\r\n    一种是使用父类的“类名::“来调用父类中被覆盖的方法；\r\n    一种是使用“parent::”的方试来调用父类中被覆盖的方法；\r\n    `$b = &$a;`  销毁$a则$b也被销毁\r\n    子类可以直接访问父类的方法和属性\r\n3. 访问控制\r\n    `public` (公有的、默认的)，`protected` (受保护的)和`private` (私有的)三种。\r\n4. static\r\n    static成员能够限制外部的访问，因为static的成员是属于类的，是不属于任何对象实例，是在类第一次被加载的时候分配的空间，其他类是无法访问的，只对类的实例共享，能一定程度对类该成员形成保护；\r\n从内存的角度我们来分析一下，内存从逻辑上被分为四段，其中对象是放在“堆内存”里面，对象的引用被放到了“栈内存“里，而静态成员则放到了“初始化静态段”，在类第一次被加载的时候放入的，可以让堆内存里面的每个对象所共享。\r\n    * 类里面的静态方法只能访问类的静态的属性，\r\n    * 静态属性和静态方法在定义时在访问控制关键字后面添加static关键字即可\r\n    * 静态属性用于保存类的公有数据，\r\n    * 类的内部可以通过self或者static关键字访问自身静态成员\r\n5. const\r\n    在PHP中定义常量使用的是“define()”这个函数，但是在类里面定义常量使用的是“const”这个关键字。\r\n    用“const”修饰的成员属性的访问方式和“static”修饰的成员访问的方式差不多，也是使用“类名”，在方法里面使用“self”关键字。但是不用使用“$”符号，也不能使用对象来访问。\r\n\r\n6. 接口\r\n    * 可以用extends让接口继承接口\r\n    * 类中实现接口中所有方法\r\n    * 类的方法必须有实现，接口的方法必须为空\r\n    * 可以用instanceof关键字来判断某个对象是否实现了某个接口,\r\n    * 接口是一种特殊的抽象类，抽象类又是一种特殊的类，所以接口也是一种特殊的类\r\n    * 接口里面所有的方法必须都是声明为抽象方法，另外接口里面不能声明变量(但可声明常量constant)，而且接口里面所有的成员都是public权限的。所以子类在实现的时候 也一定要使用public权限实限。\r\n而我们定义一接口的子类去实现接口中全部抽象方法使用的关键字是“implements”，而不是我们前面所说的“extends”;\r\n    * PHP中不仅一个类可以实现多个接口，也可以在继承一个类的同时实现多个接口                           * 一定要先继承类再去实现接口\r\n7. 多态\r\n    相同的一行代码，对于传入不同的接口实现的对象的时候，表现是不同的，这就是多态。多态是除封装和继承之外的另一个面象对象的三大特性之一，其实在我们PHP这种弱类形的面向对象的语言里面，多态的特性并不是特别的明显，其实就是对象类型变量的变相引用。\r\n8. 抽象类\r\n    子类必须把父类中的抽象方法全部都实现，否则子类中还存在抽象方法，那么子类还是抽象类，还是不能实例化类；为什么我们非要从抽象类中继承呢？因为有的时候我们要实现一些功能就必须从抽象类中继承，否则这些功能你就实现不了，如果继承了抽象类，就要实现类其中的抽象方法；\r\n9. 魔术方法\r\n    `__tostring()`当对象被当做String使用时，这个方法会被自动调用。echo $obj\r\n```\r\npublic function __tostring(){\r\n    return \"__tostring\";//用return\r\n}\r\n```\r\n有两种情况我们必须把对象串行化，第一种情况就是把一个对象在网络中传输的时候要将对象串行化，第二种情况就是把对象写入文件或是数据库的时候用到串行化。\r\n    `__invoke()`当对象被当成方法调用时，这个方法会被自动调用 `$obj(4)`\r\n    `__call()`\r\n当对象访问不存在的方法名称时，__call()方法会被自动调用\r\n    `__callStatic()`\r\n当对象访问不存在的静态方法名称时，__callStatic()方法会被自动调用\r\n这两个方法在PHP里面也被称为方法的重载(overloading),第一个参数是调用的方法的名称，第二参数是方法调用的参数组成的数组\r\n-注意区分重写(overwrite)\r\n-通过这两个方法，同一个方法的名称的调用可以对应不同的方法实现\r\npublic static function __callStatic($name,$arguments){}\r\n//静态方法的重载，注意这个方法需要设定为static\r\n\r\n    `__get(),__set(),__isset(),__unset()`\r\n在给不可访问属性赋值时，__set()会被调用。\r\n读取不可访问属性的值时，__get()会被调用。\r\n当对不可访问属性调用isset()或empty()时，__isset()会被调用。\r\n当对不可访问属性调用unset()时，__unset()会被调用。\r\n所谓不可访问属性，实际上就是在调用某个属性时发现这个属性没有被定义，这时候不同的操作会触发不同的魔术方法\r\n这几个方法也被称为属性重载的魔术方法\r\n一般来说，总是把类的属性定义为private，这更符合现实的逻辑。但是，对属性的读取和赋值操作是非常频繁的，因此在PHP5中，预定义了两个函数”__get()”和”__set()”来获取和赋值其属性，以及检查属性的”__isset()”和删除属性的方法”__unset()”。\r\n\r\n使用“clone”这个关键字克隆对象，调用`__clone`\r\n在 PHP 5 中，可以定义一个 `__autoload()`函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， `__autoload()`函数接收的一个参数，就是你想加载的类的类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\r\n10. final\r\n    使用final关键标记的类不能被继承；\r\n    使用final关键标记的方法不能被子类覆盖，是最终版本；','',1,4,'arangda',1,1543569372,1543569372),(43,'yii2 中设置/添加js和css','　　视图中\r\n　　加载 css 和 js 代码\r\n```\r\n　　$this->registerCss( \r\n　　\r\n```\r\n　　加载 css 和 js 文件\r\n```\r\n　　$t','　　视图中\r\n　　加载 css 和 js 代码\r\n```\r\n　　$this->registerCss( <<< EOT_CSS\r\n　　EOT_CSS\r\n　　);\r\n\r\n　　$this->registerJs( <<< EOT_JS\r\n　　EOT_JS\r\n　　);\r\n\r\n　　<?php $this->beginBlock(\'scyy\')?>\r\n　　php $this->endBlock() ?>\r\n　　<?php $this->registerJs($this->blocks[\'scyy\']);?>\r\n```\r\n　　加载 css 和 js 文件\r\n```\r\n　　$this->registerCssFile(\'@web/css/font-awesome.css\',[\'depends\'=>[\'backend\\assets\\AppAsset\']]);\r\n　　$this->registerCssFile(\'@web/css/index-css.css\');\r\n\r\n　　$this->registerJsFile(\'@web/js/jquery-ui.custom.js\',[\'depends\'=>[\'backend\\assets\\AppAsset\']]);\r\n　　$this->registerJsFile(\'@web/js/jquery-2.1.9.js\');\r\n\r\n　　//如下position是让定义CSS/JS出现的位置\r\n　　$this->registerJsFile(\'@web/js/jquery-ui.custom.js\',[\'depends\'=>[\'backend\\assets\\AppAsset\'],\'position\'=>$this::POS_HEAD]);\r\n```','',2,4,'arangda',1,1543905623,1543905760),(44,'Yii2 分页面设置 keywords、description','layout文件中：main.php的写法：\r\n```\r\n  \r\n  \r\n```\r\n页面文件的写法：\r\n```\r\n$this->title = $goods[\'seo_title\'','layout文件中：main.php的写法：\r\n```\r\n <title><?= Html::encode($this->title) ?></title> \r\n <?php\r\n    //注意key值（即：$this->metaTags中的 keywords、description）与页面上的key值对应\r\n    !isset($this->metaTags[\'keywords\']) && $this->registerMetaTag([\"name\" => \"keywords\", \"content\" => params(\'header_keyword\')]);\r\n    !isset($this->metaTags[\'description\']) && $this->registerMetaTag([\"name\" => \"description\", \"content\" => params(\'header_description\')]);\r\n?> \r\n```\r\n页面文件的写法：\r\n```\r\n$this->title = $goods[\'seo_title\']; \r\n$this->registerMetaTag([\"name\" => \"keywords\", \"content\" => $goods[\'seo_keywords\']], \'keywords\'); \r\n$this->registerMetaTag([\"name\" => \"description\", \"content\" => $goods[\'seo_describe\']], \'description\');\r\n```\r\n\r\n注意上面数组第三项一定要有，不然layout中的设置也会显示在页面上','',2,4,'arangda',1,1543905977,1543906048),(45,'redis在windows上安装（php）','1. windows下安装\r\n下载地址：https://github.com/MSOpenTech/redis/releases。根据实际情况选择安装。\r\n2. phpstudy安','1. windows下安装\r\n下载地址：https://github.com/MSOpenTech/redis/releases。根据实际情况选择安装。\r\n2. phpstudy安装redis扩展\r\nhttp://pecl.php.net/package/redis\r\n划重点，运行phpinfo(), 观察第四行 x86 \r\n好了记住这个 x86\r\n3. 下载解压，之后把php_redis.dll，   php_redis.pdb  这两个文件移动到 php->php7.0-nts->ext  下面；\r\n4. 修改php.ini文件，增加\r\nextension=php_igbinary.dll\r\nextension=php_redis.dll\r\n5. 重启phpstudy,查看phpinfo中redis,能查到就可以了','',1,4,'arangda',1,1544664128,1544664128),(46,'composer update出现问题The package is not available in','```\r\n　　composer提示:\r\n　　Your requirements could not be resolved to an installable set of pac','```\r\n　　composer提示:\r\n　　Your requirements could not be resolved to an installable set of packages.\r\n　　Problem 1\r\n　　- yiisoft/yii2 2.0.7 requires bower-asset/jquery 2.2.*@stable | 2.1.*@stable\r\n　　| 1.11.*@stable -> no matching package found.\r\n　　- yiisoft/yii2 2.0.6 requires bower-asset/jquery 2.1.*@stable | 1.11.*@stabl\r\n　　e -> no matching package found.\r\n　　- Installation request for yiisoft/yii2 >=2.0.6 -> satisfiable by yiisoft/yi\r\n　　i2[2.0.6, 2.0.7].\r\n　　Potential causes:\r\n　　- A typo in the package name\r\n　　- The package is not available in a stable-enough version according to your min\r\n　　imum-stability setting\r\n　　see <https://getcomposer.org/doc/04-schema.md#minimum-stability> for more det\r\n　　ails.\r\n　　Read <https://getcomposer.org/doc/articles/troubleshooting.md> for further commo\r\n　　n problems.\r\n```\r\n　　上面的提示信息给出了两个潜在的原因:\r\n\r\n　　- 1, package name包名输入错误, 具体是哪个包名错误没有说明, 这个信息不太靠谱.\r\n　　- 2, 这条信息比较有用, 大意是composer根据现有的配置在现有版本下无法获取到包,\r\n　　可以猜测下, 大概是composer需要update或者插件需要更新了.\r\n\r\n　　于是执行composer self-update更新composer, 然后再接着composer update拉包,但是仍是提示上面的错误.\r\n\r\n　　那就接着更新(安装)插件, 在这个网站下https://packagist.org/packages/fxp/composer-asset-plugin可以看到`composer-asset-plugin`的最新版本, 然后执行`composer global require \"fxp/composer-asset-plugin:~1.4.4\"`\r\n\r\n　　我安装时最新版本为1.4.4,可以根据官网的版本更新来做相应更改.这条命令会将插件安装到composer主文件夹下的vendor文件夹下面, 并在主文件夹下的composer.json写入配置信息\r\n    \r\n   更新过程中可能让输入token,这时候去github.com登录，在settings/developer settings得到一个token','',2,4,'arangda',1,1546502023,1546502349),(47,'Yii2 - can’t find debug Module','Yii2 - can’t find debug Module\r\n查看此模块，有些文件丢失？，删除debug模块，然后再composer install解决\r\n\r\ncentos上 初','Yii2 - can’t find debug Module\r\n查看此模块，有些文件丢失？，删除debug模块，然后再composer install解决\r\n\r\ncentos上 初始化yii2,用init(./init)提示错误，应该加上php init 运行。','',2,4,'arangda',1,1546821130,1546821151),(48,'a foreign key constraint fails删除外键约束','\r\n1.查看数据库表创建的sql语句\r\n\r\n    show create table vip\r\n\r\n2.查看外键的约束名\r\n```\r\nCREATE TABLE `post` (\r','\r\n1.查看数据库表创建的sql语句\r\n\r\n    show create table vip\r\n\r\n2.查看外键的约束名\r\n```\r\nCREATE TABLE `post` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(128) COLLATE utf8_unicode_ci NOT NULL,\r\n  `content` text COLLATE utf8_unicode_ci NOT NULL,\r\n  `tags` text COLLATE utf8_unicode_ci,\r\n  `status` int(11) NOT NULL,\r\n  `create_time` int(11) DEFAULT NULL,\r\n  `update_time` int(11) DEFAULT NULL,\r\n  `author_id` int(11) DEFAULT NULL,\r\n  `cat_id` int(11) DEFAULT NULL,\r\n  `label_img` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  `subhead` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `FK_post_author` (`author_id`),\r\n  KEY `FK_post_status` (`status`),\r\n  CONSTRAINT `FK_post_status` FOREIGN KEY (`status`) REFERENCES `poststatus` (`id`) ON DELETE CASCADE\r\n) ENGINE=InnoDB AUTO_INCREMENT=527 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci\r\n```\r\n3.解除外键约束\r\n\r\n    alter table post drop foreign key FK_post_author\r\n    \r\n4.删除外键\r\n\r\n    alter table vip drop author_id\r\n','',1,4,'arangda',1,1546829604,1546829604);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `relation_post_tags`
--

DROP TABLE IF EXISTS `relation_post_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `relation_post_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `post_id` int(11) DEFAULT NULL COMMENT '文章id',
  `tag_id` int(11) DEFAULT NULL COMMENT '标签id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `relation_post_tags`
--

LOCK TABLES `relation_post_tags` WRITE;
/*!40000 ALTER TABLE `relation_post_tags` DISABLE KEYS */;
INSERT INTO `relation_post_tags` VALUES (22,18,14),(30,37,14),(32,25,21);
/*!40000 ALTER TABLE `relation_post_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `tag_name` varchar(255) DEFAULT NULL COMMENT '标签名称',
  `post_num` int(11) NOT NULL DEFAULT '0' COMMENT '关联文章数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (14,'git',2),(21,'samba',1);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `auth_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `password_hash` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password_reset_token` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '10',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `password_reset_token` (`password_reset_token`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (2,'test','l_7xweIfu9SsSeYSS94jz0_0VsoTVpC0','$2y$13$0Rw2IXUzKcLALM7E0ysd6.2zY07TdUvQuffSHaEPgIIMmcX7xJPYG',NULL,'1989513003@qq.com',10,1513914013,1513914013),(3,'赵伟','h14OfvZLoc-J2o-_t4el8B0pgCI9c3Uk','$2y$13$3hevJLdlca78MUIb9kuxYOG7CqNjd7GYt0UeOJjQq4EPbR68Q9kQi',NULL,'198455@qq.com',10,1514961400,1514961400),(4,'arangda','d5LLFW4MDHCi96XO9_-rKY9De5B3Y98i','$2y$13$UQpcnOgJAtaYdvoc1yXF1.xoh1U0LwIdynsj.BuQsiMOY2jj9boOq',NULL,'273890638@qq.com',10,1517221229,1517221229);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-01-21  9:48:14
